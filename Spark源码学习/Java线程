五个状态
新生态 就绪态(start的时候进入)，运行态，阻塞态(sleep,或者逻辑执行完了)，死亡态

临界资源：多个线程共享的资源
售票问题出现原因：多个线程同时操作某个资源，加锁可解决
1.同步代码段：对资源上锁，不允许其他线程访问，要保证多个线程看到的锁是同一把锁
synchronized(对象锁或者类锁){
	动作
}
2.同步方法
private synchronized static void func(){
	动作
}
3.锁对象
lock.lock()
动作
lock.unlock()

死锁：两个线程各自拥有对方需要的锁，但却不释放自己的锁
wait:是Object类中的一个方法，当前的线程释放自己的锁标记，并且让出CPU资源，使得当前的线程进入等待队列中
notify：是Object类中的一个方法，唤醒等待队列的一个线程，使得线程进入锁池
notifyAll：是Object类中的一个方法，唤醒等待队列的所有线程，使得线程进入锁池

多线程环境下的单例模式有问题，需要加synchronized保证

生产者消费者模式：该模式需要利用多线程实现
public class program{
	
}
